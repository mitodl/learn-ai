/* tslint:disable */
/* eslint-disable */
/**
 * Learn AI API
 * MIT public API
 *
 * The version of the OpenAPI document: 0.0.1 (v0)
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration"
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios"
import globalAxios from "axios"
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common"
import type { RequestArgs } from "./base"
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
} from "./base"

/**
 * Serializer for chat messages.  This serializer is used to return just the message, content and role, and is intended to backfill chat history in a frontend UI.
 * @export
 * @interface ChatMessage
 */
export interface ChatMessage {
  /**
   *
   * @type {string}
   * @memberof ChatMessage
   */
  checkpoint_id: string
  /**
   *
   * @type {string}
   * @memberof ChatMessage
   */
  role: string
  /**
   *
   * @type {string}
   * @memberof ChatMessage
   */
  content: string
}
/**
 *
 * @export
 * @interface LLMModel
 */
export interface LLMModel {
  /**
   *
   * @type {string}
   * @memberof LLMModel
   */
  provider: string
  /**
   *
   * @type {string}
   * @memberof LLMModel
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof LLMModel
   */
  litellm_id: string
}
/**
 *
 * @export
 * @interface PaginatedChatMessageList
 */
export interface PaginatedChatMessageList {
  /**
   *
   * @type {number}
   * @memberof PaginatedChatMessageList
   */
  count: number
  /**
   *
   * @type {string}
   * @memberof PaginatedChatMessageList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedChatMessageList
   */
  previous?: string | null
  /**
   *
   * @type {Array<ChatMessage>}
   * @memberof PaginatedChatMessageList
   */
  results: Array<ChatMessage>
}
/**
 *
 * @export
 * @interface PaginatedUserChatSessionList
 */
export interface PaginatedUserChatSessionList {
  /**
   *
   * @type {number}
   * @memberof PaginatedUserChatSessionList
   */
  count: number
  /**
   *
   * @type {string}
   * @memberof PaginatedUserChatSessionList
   */
  next?: string | null
  /**
   *
   * @type {string}
   * @memberof PaginatedUserChatSessionList
   */
  previous?: string | null
  /**
   *
   * @type {Array<UserChatSession>}
   * @memberof PaginatedUserChatSessionList
   */
  results: Array<UserChatSession>
}
/**
 * Serializer for user chat sessions
 * @export
 * @interface PatchedUserChatSessionRequest
 */
export interface PatchedUserChatSessionRequest {
  /**
   *
   * @type {string}
   * @memberof PatchedUserChatSessionRequest
   */
  title?: string
}
/**
 *
 * @export
 * @interface RecommendationAgentV0Request
 */
export interface RecommendationAgentV0Request {
  /**
   * The user\'s message to the AI
   * @type {string}
   * @memberof RecommendationAgentV0Request
   */
  message: string
  /**
   * The LLM model to use
   * @type {string}
   * @memberof RecommendationAgentV0Request
   */
  model?: string
  /**
   * The LLM temperature to use
   * @type {number}
   * @memberof RecommendationAgentV0Request
   */
  temperature?: number
  /**
   * System prompt (admins only)
   * @type {string}
   * @memberof RecommendationAgentV0Request
   */
  instructions?: string
  /**
   * Whether to clear chat history
   * @type {boolean}
   * @memberof RecommendationAgentV0Request
   */
  clear_history?: boolean
  /**
   * The thread id to use
   * @type {string}
   * @memberof RecommendationAgentV0Request
   */
  thread_id?: string
}
/**
 *
 * @export
 * @interface SyllabusAgentV0Request
 */
export interface SyllabusAgentV0Request {
  /**
   * The user\'s message to the AI
   * @type {string}
   * @memberof SyllabusAgentV0Request
   */
  message: string
  /**
   * The course id
   * @type {string}
   * @memberof SyllabusAgentV0Request
   */
  course_id: string
  /**
   * Vector embedding collection name
   * @type {string}
   * @memberof SyllabusAgentV0Request
   */
  collection_name?: string
  /**
   * The LLM model to use
   * @type {string}
   * @memberof SyllabusAgentV0Request
   */
  model?: string
  /**
   * The LLM temperature to use
   * @type {number}
   * @memberof SyllabusAgentV0Request
   */
  temperature?: number
  /**
   * System prompt (admins only)
   * @type {string}
   * @memberof SyllabusAgentV0Request
   */
  instructions?: string
  /**
   * Whether to clear chat history
   * @type {boolean}
   * @memberof SyllabusAgentV0Request
   */
  clear_history?: boolean
  /**
   * The thread id to use
   * @type {string}
   * @memberof SyllabusAgentV0Request
   */
  thread_id?: string
}
/**
 * Serializer for system prompts
 * @export
 * @interface SystemPrompt
 */
export interface SystemPrompt {
  /**
   *
   * @type {string}
   * @memberof SystemPrompt
   */
  prompt_name: string
  /**
   *
   * @type {string}
   * @memberof SystemPrompt
   */
  prompt_value: string
}
/**
 * Serializer for user chat sessions
 * @export
 * @interface UserChatSession
 */
export interface UserChatSession {
  /**
   *
   * @type {string}
   * @memberof UserChatSession
   */
  thread_id: string
  /**
   *
   * @type {string}
   * @memberof UserChatSession
   */
  title?: string
  /**
   *
   * @type {number}
   * @memberof UserChatSession
   */
  user: number | null
  /**
   *
   * @type {string}
   * @memberof UserChatSession
   */
  created_on: string
  /**
   *
   * @type {string}
   * @memberof UserChatSession
   */
  updated_on: string
}
/**
 * Serializer for user chat sessions
 * @export
 * @interface UserChatSessionRequest
 */
export interface UserChatSessionRequest {
  /**
   *
   * @type {string}
   * @memberof UserChatSessionRequest
   */
  title?: string
}

/**
 * ChannelsApi - axios parameter creator
 * @export
 */
export const ChannelsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Recommendation agent endpoint via AsyncHttpConsumer
     * @param {RecommendationAgentV0Request} RecommendationAgentV0Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recommendationAgentV0: async (
      RecommendationAgentV0Request: RecommendationAgentV0Request,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'RecommendationAgentV0Request' is not null or undefined
      assertParamExists(
        "recommendationAgentV0",
        "RecommendationAgentV0Request",
        RecommendationAgentV0Request,
      )
      const localVarPath = `/http/recommendation_agent/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        RecommendationAgentV0Request,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Syllabus agent endpoint via AsyncHttpConsumer
     * @param {SyllabusAgentV0Request} SyllabusAgentV0Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syllabusAgentV0: async (
      SyllabusAgentV0Request: SyllabusAgentV0Request,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'SyllabusAgentV0Request' is not null or undefined
      assertParamExists(
        "syllabusAgentV0",
        "SyllabusAgentV0Request",
        SyllabusAgentV0Request,
      )
      const localVarPath = `/http/syllabus_agent/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        SyllabusAgentV0Request,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ChannelsApi - functional programming interface
 * @export
 */
export const ChannelsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ChannelsApiAxiosParamCreator(configuration)
  return {
    /**
     * Recommendation agent endpoint via AsyncHttpConsumer
     * @param {RecommendationAgentV0Request} RecommendationAgentV0Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async recommendationAgentV0(
      RecommendationAgentV0Request: RecommendationAgentV0Request,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.recommendationAgentV0(
          RecommendationAgentV0Request,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChannelsApi.recommendationAgentV0"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * Syllabus agent endpoint via AsyncHttpConsumer
     * @param {SyllabusAgentV0Request} SyllabusAgentV0Request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async syllabusAgentV0(
      SyllabusAgentV0Request: SyllabusAgentV0Request,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.syllabusAgentV0(
        SyllabusAgentV0Request,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChannelsApi.syllabusAgentV0"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * ChannelsApi - factory interface
 * @export
 */
export const ChannelsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ChannelsApiFp(configuration)
  return {
    /**
     * Recommendation agent endpoint via AsyncHttpConsumer
     * @param {ChannelsApiRecommendationAgentV0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recommendationAgentV0(
      requestParameters: ChannelsApiRecommendationAgentV0Request,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<string> {
      return localVarFp
        .recommendationAgentV0(
          requestParameters.RecommendationAgentV0Request,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Syllabus agent endpoint via AsyncHttpConsumer
     * @param {ChannelsApiSyllabusAgentV0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    syllabusAgentV0(
      requestParameters: ChannelsApiSyllabusAgentV0Request,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<string> {
      return localVarFp
        .syllabusAgentV0(requestParameters.SyllabusAgentV0Request, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for recommendationAgentV0 operation in ChannelsApi.
 * @export
 * @interface ChannelsApiRecommendationAgentV0Request
 */
export interface ChannelsApiRecommendationAgentV0Request {
  /**
   *
   * @type {RecommendationAgentV0Request}
   * @memberof ChannelsApiRecommendationAgentV0
   */
  readonly RecommendationAgentV0Request: RecommendationAgentV0Request
}

/**
 * Request parameters for syllabusAgentV0 operation in ChannelsApi.
 * @export
 * @interface ChannelsApiSyllabusAgentV0Request
 */
export interface ChannelsApiSyllabusAgentV0Request {
  /**
   *
   * @type {SyllabusAgentV0Request}
   * @memberof ChannelsApiSyllabusAgentV0
   */
  readonly SyllabusAgentV0Request: SyllabusAgentV0Request
}

/**
 * ChannelsApi - object-oriented interface
 * @export
 * @class ChannelsApi
 * @extends {BaseAPI}
 */
export class ChannelsApi extends BaseAPI {
  /**
   * Recommendation agent endpoint via AsyncHttpConsumer
   * @param {ChannelsApiRecommendationAgentV0Request} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelsApi
   */
  public recommendationAgentV0(
    requestParameters: ChannelsApiRecommendationAgentV0Request,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelsApiFp(this.configuration)
      .recommendationAgentV0(
        requestParameters.RecommendationAgentV0Request,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Syllabus agent endpoint via AsyncHttpConsumer
   * @param {ChannelsApiSyllabusAgentV0Request} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChannelsApi
   */
  public syllabusAgentV0(
    requestParameters: ChannelsApiSyllabusAgentV0Request,
    options?: RawAxiosRequestConfig,
  ) {
    return ChannelsApiFp(this.configuration)
      .syllabusAgentV0(requestParameters.SyllabusAgentV0Request, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ChatSessionsApi - axios parameter creator
 * @export
 */
export const ChatSessionsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {string} thread_id thread id of the chat session
     * @param {UserChatSessionRequest} [UserChatSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatSessionsCreate: async (
      thread_id: string,
      UserChatSessionRequest?: UserChatSessionRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'thread_id' is not null or undefined
      assertParamExists("chatSessionsCreate", "thread_id", thread_id)
      const localVarPath = `/api/v0/chat_sessions/`.replace(
        `{${"thread_id"}}`,
        encodeURIComponent(String(thread_id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        UserChatSessionRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {string} thread_id thread id of the chat session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatSessionsDestroy: async (
      thread_id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'thread_id' is not null or undefined
      assertParamExists("chatSessionsDestroy", "thread_id", thread_id)
      const localVarPath = `/api/v0/chat_sessions/{thread_id}/`.replace(
        `{${"thread_id"}}`,
        encodeURIComponent(String(thread_id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {string} thread_id thread id of the chat session
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatSessionsList: async (
      thread_id: string,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'thread_id' is not null or undefined
      assertParamExists("chatSessionsList", "thread_id", thread_id)
      const localVarPath = `/api/v0/chat_sessions/`.replace(
        `{${"thread_id"}}`,
        encodeURIComponent(String(thread_id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Read-only API endpoint for returning just human/agent chat messages in a thread.
     * @param {string} thread_id thread id of the chat session
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatSessionsMessagesList: async (
      thread_id: string,
      limit?: number,
      offset?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'thread_id' is not null or undefined
      assertParamExists("chatSessionsMessagesList", "thread_id", thread_id)
      const localVarPath =
        `/api/v0/chat_sessions/{thread_id}/messages/`.replace(
          `{${"thread_id"}}`,
          encodeURIComponent(String(thread_id)),
        )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (limit !== undefined) {
        localVarQueryParameter["limit"] = limit
      }

      if (offset !== undefined) {
        localVarQueryParameter["offset"] = offset
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {string} thread_id thread id of the chat session
     * @param {PatchedUserChatSessionRequest} [PatchedUserChatSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatSessionsPartialUpdate: async (
      thread_id: string,
      PatchedUserChatSessionRequest?: PatchedUserChatSessionRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'thread_id' is not null or undefined
      assertParamExists("chatSessionsPartialUpdate", "thread_id", thread_id)
      const localVarPath = `/api/v0/chat_sessions/{thread_id}/`.replace(
        `{${"thread_id"}}`,
        encodeURIComponent(String(thread_id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter["Content-Type"] = "application/json"

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      localVarRequestOptions.data = serializeDataIfNeeded(
        PatchedUserChatSessionRequest,
        localVarRequestOptions,
        configuration,
      )

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {string} thread_id thread id of the chat session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatSessionsRetrieve: async (
      thread_id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'thread_id' is not null or undefined
      assertParamExists("chatSessionsRetrieve", "thread_id", thread_id)
      const localVarPath = `/api/v0/chat_sessions/{thread_id}/`.replace(
        `{${"thread_id"}}`,
        encodeURIComponent(String(thread_id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ChatSessionsApi - functional programming interface
 * @export
 */
export const ChatSessionsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ChatSessionsApiAxiosParamCreator(configuration)
  return {
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {string} thread_id thread id of the chat session
     * @param {UserChatSessionRequest} [UserChatSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async chatSessionsCreate(
      thread_id: string,
      UserChatSessionRequest?: UserChatSessionRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserChatSession>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.chatSessionsCreate(
          thread_id,
          UserChatSessionRequest,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChatSessionsApi.chatSessionsCreate"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {string} thread_id thread id of the chat session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async chatSessionsDestroy(
      thread_id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.chatSessionsDestroy(thread_id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChatSessionsApi.chatSessionsDestroy"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {string} thread_id thread id of the chat session
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async chatSessionsList(
      thread_id: string,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedUserChatSessionList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.chatSessionsList(
          thread_id,
          limit,
          offset,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChatSessionsApi.chatSessionsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * Read-only API endpoint for returning just human/agent chat messages in a thread.
     * @param {string} thread_id thread id of the chat session
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async chatSessionsMessagesList(
      thread_id: string,
      limit?: number,
      offset?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<PaginatedChatMessageList>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.chatSessionsMessagesList(
          thread_id,
          limit,
          offset,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChatSessionsApi.chatSessionsMessagesList"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {string} thread_id thread id of the chat session
     * @param {PatchedUserChatSessionRequest} [PatchedUserChatSessionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async chatSessionsPartialUpdate(
      thread_id: string,
      PatchedUserChatSessionRequest?: PatchedUserChatSessionRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserChatSession>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.chatSessionsPartialUpdate(
          thread_id,
          PatchedUserChatSessionRequest,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChatSessionsApi.chatSessionsPartialUpdate"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {string} thread_id thread id of the chat session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async chatSessionsRetrieve(
      thread_id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<UserChatSession>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.chatSessionsRetrieve(thread_id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ChatSessionsApi.chatSessionsRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * ChatSessionsApi - factory interface
 * @export
 */
export const ChatSessionsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ChatSessionsApiFp(configuration)
  return {
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {ChatSessionsApiChatSessionsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatSessionsCreate(
      requestParameters: ChatSessionsApiChatSessionsCreateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserChatSession> {
      return localVarFp
        .chatSessionsCreate(
          requestParameters.thread_id,
          requestParameters.UserChatSessionRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {ChatSessionsApiChatSessionsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatSessionsDestroy(
      requestParameters: ChatSessionsApiChatSessionsDestroyRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .chatSessionsDestroy(requestParameters.thread_id, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {ChatSessionsApiChatSessionsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatSessionsList(
      requestParameters: ChatSessionsApiChatSessionsListRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PaginatedUserChatSessionList> {
      return localVarFp
        .chatSessionsList(
          requestParameters.thread_id,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * Read-only API endpoint for returning just human/agent chat messages in a thread.
     * @param {ChatSessionsApiChatSessionsMessagesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatSessionsMessagesList(
      requestParameters: ChatSessionsApiChatSessionsMessagesListRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<PaginatedChatMessageList> {
      return localVarFp
        .chatSessionsMessagesList(
          requestParameters.thread_id,
          requestParameters.limit,
          requestParameters.offset,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {ChatSessionsApiChatSessionsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatSessionsPartialUpdate(
      requestParameters: ChatSessionsApiChatSessionsPartialUpdateRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserChatSession> {
      return localVarFp
        .chatSessionsPartialUpdate(
          requestParameters.thread_id,
          requestParameters.PatchedUserChatSessionRequest,
          options,
        )
        .then((request) => request(axios, basePath))
    },
    /**
     * API endpoint that allows user session chats to be viewed or edited.
     * @param {ChatSessionsApiChatSessionsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatSessionsRetrieve(
      requestParameters: ChatSessionsApiChatSessionsRetrieveRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<UserChatSession> {
      return localVarFp
        .chatSessionsRetrieve(requestParameters.thread_id, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for chatSessionsCreate operation in ChatSessionsApi.
 * @export
 * @interface ChatSessionsApiChatSessionsCreateRequest
 */
export interface ChatSessionsApiChatSessionsCreateRequest {
  /**
   * thread id of the chat session
   * @type {string}
   * @memberof ChatSessionsApiChatSessionsCreate
   */
  readonly thread_id: string

  /**
   *
   * @type {UserChatSessionRequest}
   * @memberof ChatSessionsApiChatSessionsCreate
   */
  readonly UserChatSessionRequest?: UserChatSessionRequest
}

/**
 * Request parameters for chatSessionsDestroy operation in ChatSessionsApi.
 * @export
 * @interface ChatSessionsApiChatSessionsDestroyRequest
 */
export interface ChatSessionsApiChatSessionsDestroyRequest {
  /**
   * thread id of the chat session
   * @type {string}
   * @memberof ChatSessionsApiChatSessionsDestroy
   */
  readonly thread_id: string
}

/**
 * Request parameters for chatSessionsList operation in ChatSessionsApi.
 * @export
 * @interface ChatSessionsApiChatSessionsListRequest
 */
export interface ChatSessionsApiChatSessionsListRequest {
  /**
   * thread id of the chat session
   * @type {string}
   * @memberof ChatSessionsApiChatSessionsList
   */
  readonly thread_id: string

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof ChatSessionsApiChatSessionsList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof ChatSessionsApiChatSessionsList
   */
  readonly offset?: number
}

/**
 * Request parameters for chatSessionsMessagesList operation in ChatSessionsApi.
 * @export
 * @interface ChatSessionsApiChatSessionsMessagesListRequest
 */
export interface ChatSessionsApiChatSessionsMessagesListRequest {
  /**
   * thread id of the chat session
   * @type {string}
   * @memberof ChatSessionsApiChatSessionsMessagesList
   */
  readonly thread_id: string

  /**
   * Number of results to return per page.
   * @type {number}
   * @memberof ChatSessionsApiChatSessionsMessagesList
   */
  readonly limit?: number

  /**
   * The initial index from which to return the results.
   * @type {number}
   * @memberof ChatSessionsApiChatSessionsMessagesList
   */
  readonly offset?: number
}

/**
 * Request parameters for chatSessionsPartialUpdate operation in ChatSessionsApi.
 * @export
 * @interface ChatSessionsApiChatSessionsPartialUpdateRequest
 */
export interface ChatSessionsApiChatSessionsPartialUpdateRequest {
  /**
   * thread id of the chat session
   * @type {string}
   * @memberof ChatSessionsApiChatSessionsPartialUpdate
   */
  readonly thread_id: string

  /**
   *
   * @type {PatchedUserChatSessionRequest}
   * @memberof ChatSessionsApiChatSessionsPartialUpdate
   */
  readonly PatchedUserChatSessionRequest?: PatchedUserChatSessionRequest
}

/**
 * Request parameters for chatSessionsRetrieve operation in ChatSessionsApi.
 * @export
 * @interface ChatSessionsApiChatSessionsRetrieveRequest
 */
export interface ChatSessionsApiChatSessionsRetrieveRequest {
  /**
   * thread id of the chat session
   * @type {string}
   * @memberof ChatSessionsApiChatSessionsRetrieve
   */
  readonly thread_id: string
}

/**
 * ChatSessionsApi - object-oriented interface
 * @export
 * @class ChatSessionsApi
 * @extends {BaseAPI}
 */
export class ChatSessionsApi extends BaseAPI {
  /**
   * API endpoint that allows user session chats to be viewed or edited.
   * @param {ChatSessionsApiChatSessionsCreateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatSessionsApi
   */
  public chatSessionsCreate(
    requestParameters: ChatSessionsApiChatSessionsCreateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChatSessionsApiFp(this.configuration)
      .chatSessionsCreate(
        requestParameters.thread_id,
        requestParameters.UserChatSessionRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * API endpoint that allows user session chats to be viewed or edited.
   * @param {ChatSessionsApiChatSessionsDestroyRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatSessionsApi
   */
  public chatSessionsDestroy(
    requestParameters: ChatSessionsApiChatSessionsDestroyRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChatSessionsApiFp(this.configuration)
      .chatSessionsDestroy(requestParameters.thread_id, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * API endpoint that allows user session chats to be viewed or edited.
   * @param {ChatSessionsApiChatSessionsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatSessionsApi
   */
  public chatSessionsList(
    requestParameters: ChatSessionsApiChatSessionsListRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChatSessionsApiFp(this.configuration)
      .chatSessionsList(
        requestParameters.thread_id,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Read-only API endpoint for returning just human/agent chat messages in a thread.
   * @param {ChatSessionsApiChatSessionsMessagesListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatSessionsApi
   */
  public chatSessionsMessagesList(
    requestParameters: ChatSessionsApiChatSessionsMessagesListRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChatSessionsApiFp(this.configuration)
      .chatSessionsMessagesList(
        requestParameters.thread_id,
        requestParameters.limit,
        requestParameters.offset,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * API endpoint that allows user session chats to be viewed or edited.
   * @param {ChatSessionsApiChatSessionsPartialUpdateRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatSessionsApi
   */
  public chatSessionsPartialUpdate(
    requestParameters: ChatSessionsApiChatSessionsPartialUpdateRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChatSessionsApiFp(this.configuration)
      .chatSessionsPartialUpdate(
        requestParameters.thread_id,
        requestParameters.PatchedUserChatSessionRequest,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * API endpoint that allows user session chats to be viewed or edited.
   * @param {ChatSessionsApiChatSessionsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ChatSessionsApi
   */
  public chatSessionsRetrieve(
    requestParameters: ChatSessionsApiChatSessionsRetrieveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ChatSessionsApiFp(this.configuration)
      .chatSessionsRetrieve(requestParameters.thread_id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * GetTranscriptEdxModuleIdApi - axios parameter creator
 * @export
 */
export const GetTranscriptEdxModuleIdApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * API view to get the transcript block ID from edx block for a cotentfile.
     * @param {string} edx_module_id edx_module_id of the video content file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTranscriptEdxModuleIdRetrieve: async (
      edx_module_id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'edx_module_id' is not null or undefined
      assertParamExists(
        "getTranscriptEdxModuleIdRetrieve",
        "edx_module_id",
        edx_module_id,
      )
      const localVarPath = `/api/v0/get_transcript_edx_module_id/`.replace(
        `{${"edx_module_id"}}`,
        encodeURIComponent(String(edx_module_id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * GetTranscriptEdxModuleIdApi - functional programming interface
 * @export
 */
export const GetTranscriptEdxModuleIdApiFp = function (
  configuration?: Configuration,
) {
  const localVarAxiosParamCreator =
    GetTranscriptEdxModuleIdApiAxiosParamCreator(configuration)
  return {
    /**
     * API view to get the transcript block ID from edx block for a cotentfile.
     * @param {string} edx_module_id edx_module_id of the video content file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTranscriptEdxModuleIdRetrieve(
      edx_module_id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getTranscriptEdxModuleIdRetrieve(
          edx_module_id,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap[
          "GetTranscriptEdxModuleIdApi.getTranscriptEdxModuleIdRetrieve"
        ]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * GetTranscriptEdxModuleIdApi - factory interface
 * @export
 */
export const GetTranscriptEdxModuleIdApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = GetTranscriptEdxModuleIdApiFp(configuration)
  return {
    /**
     * API view to get the transcript block ID from edx block for a cotentfile.
     * @param {GetTranscriptEdxModuleIdApiGetTranscriptEdxModuleIdRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTranscriptEdxModuleIdRetrieve(
      requestParameters: GetTranscriptEdxModuleIdApiGetTranscriptEdxModuleIdRetrieveRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .getTranscriptEdxModuleIdRetrieve(
          requestParameters.edx_module_id,
          options,
        )
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for getTranscriptEdxModuleIdRetrieve operation in GetTranscriptEdxModuleIdApi.
 * @export
 * @interface GetTranscriptEdxModuleIdApiGetTranscriptEdxModuleIdRetrieveRequest
 */
export interface GetTranscriptEdxModuleIdApiGetTranscriptEdxModuleIdRetrieveRequest {
  /**
   * edx_module_id of the video content file
   * @type {string}
   * @memberof GetTranscriptEdxModuleIdApiGetTranscriptEdxModuleIdRetrieve
   */
  readonly edx_module_id: string
}

/**
 * GetTranscriptEdxModuleIdApi - object-oriented interface
 * @export
 * @class GetTranscriptEdxModuleIdApi
 * @extends {BaseAPI}
 */
export class GetTranscriptEdxModuleIdApi extends BaseAPI {
  /**
   * API view to get the transcript block ID from edx block for a cotentfile.
   * @param {GetTranscriptEdxModuleIdApiGetTranscriptEdxModuleIdRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof GetTranscriptEdxModuleIdApi
   */
  public getTranscriptEdxModuleIdRetrieve(
    requestParameters: GetTranscriptEdxModuleIdApiGetTranscriptEdxModuleIdRetrieveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return GetTranscriptEdxModuleIdApiFp(this.configuration)
      .getTranscriptEdxModuleIdRetrieve(
        requestParameters.edx_module_id,
        options,
      )
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * LlmModelsApi - axios parameter creator
 * @export
 */
export const LlmModelsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * API view to list available LLM models.
     * @param {string} [provider]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    llmModelsList: async (
      provider?: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v0/llm_models/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (provider !== undefined) {
        localVarQueryParameter["provider"] = provider
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * API view to list available LLM models.
     * @param {string} litellm_id A unique value identifying this llm model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    llmModelsRetrieve: async (
      litellm_id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'litellm_id' is not null or undefined
      assertParamExists("llmModelsRetrieve", "litellm_id", litellm_id)
      const localVarPath = `/api/v0/llm_models/{litellm_id}/`.replace(
        `{${"litellm_id"}}`,
        encodeURIComponent(String(litellm_id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * LlmModelsApi - functional programming interface
 * @export
 */
export const LlmModelsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = LlmModelsApiAxiosParamCreator(configuration)
  return {
    /**
     * API view to list available LLM models.
     * @param {string} [provider]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async llmModelsList(
      provider?: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<LLMModel>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.llmModelsList(
        provider,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LlmModelsApi.llmModelsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * API view to list available LLM models.
     * @param {string} litellm_id A unique value identifying this llm model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async llmModelsRetrieve(
      litellm_id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<LLMModel>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.llmModelsRetrieve(litellm_id, options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["LlmModelsApi.llmModelsRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * LlmModelsApi - factory interface
 * @export
 */
export const LlmModelsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = LlmModelsApiFp(configuration)
  return {
    /**
     * API view to list available LLM models.
     * @param {LlmModelsApiLlmModelsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    llmModelsList(
      requestParameters: LlmModelsApiLlmModelsListRequest = {},
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<LLMModel>> {
      return localVarFp
        .llmModelsList(requestParameters.provider, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * API view to list available LLM models.
     * @param {LlmModelsApiLlmModelsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    llmModelsRetrieve(
      requestParameters: LlmModelsApiLlmModelsRetrieveRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<LLMModel> {
      return localVarFp
        .llmModelsRetrieve(requestParameters.litellm_id, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for llmModelsList operation in LlmModelsApi.
 * @export
 * @interface LlmModelsApiLlmModelsListRequest
 */
export interface LlmModelsApiLlmModelsListRequest {
  /**
   *
   * @type {string}
   * @memberof LlmModelsApiLlmModelsList
   */
  readonly provider?: string
}

/**
 * Request parameters for llmModelsRetrieve operation in LlmModelsApi.
 * @export
 * @interface LlmModelsApiLlmModelsRetrieveRequest
 */
export interface LlmModelsApiLlmModelsRetrieveRequest {
  /**
   * A unique value identifying this llm model.
   * @type {string}
   * @memberof LlmModelsApiLlmModelsRetrieve
   */
  readonly litellm_id: string
}

/**
 * LlmModelsApi - object-oriented interface
 * @export
 * @class LlmModelsApi
 * @extends {BaseAPI}
 */
export class LlmModelsApi extends BaseAPI {
  /**
   * API view to list available LLM models.
   * @param {LlmModelsApiLlmModelsListRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LlmModelsApi
   */
  public llmModelsList(
    requestParameters: LlmModelsApiLlmModelsListRequest = {},
    options?: RawAxiosRequestConfig,
  ) {
    return LlmModelsApiFp(this.configuration)
      .llmModelsList(requestParameters.provider, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * API view to list available LLM models.
   * @param {LlmModelsApiLlmModelsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof LlmModelsApi
   */
  public llmModelsRetrieve(
    requestParameters: LlmModelsApiLlmModelsRetrieveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return LlmModelsApiFp(this.configuration)
      .llmModelsRetrieve(requestParameters.litellm_id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ProblemSetListApi - axios parameter creator
 * @export
 */
export const ProblemSetListApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * API view to get a list of problem sets for a given course.
     * @param {string} run_readable_id run_readable_id of the course run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    problemSetListRetrieve: async (
      run_readable_id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'run_readable_id' is not null or undefined
      assertParamExists(
        "problemSetListRetrieve",
        "run_readable_id",
        run_readable_id,
      )
      const localVarPath = `/api/v0/problem_set_list/`.replace(
        `{${"run_readable_id"}}`,
        encodeURIComponent(String(run_readable_id)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ProblemSetListApi - functional programming interface
 * @export
 */
export const ProblemSetListApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    ProblemSetListApiAxiosParamCreator(configuration)
  return {
    /**
     * API view to get a list of problem sets for a given course.
     * @param {string} run_readable_id run_readable_id of the course run
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async problemSetListRetrieve(
      run_readable_id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.problemSetListRetrieve(
          run_readable_id,
          options,
        )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["ProblemSetListApi.problemSetListRetrieve"]?.[index]
          ?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * ProblemSetListApi - factory interface
 * @export
 */
export const ProblemSetListApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ProblemSetListApiFp(configuration)
  return {
    /**
     * API view to get a list of problem sets for a given course.
     * @param {ProblemSetListApiProblemSetListRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    problemSetListRetrieve(
      requestParameters: ProblemSetListApiProblemSetListRetrieveRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<void> {
      return localVarFp
        .problemSetListRetrieve(requestParameters.run_readable_id, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for problemSetListRetrieve operation in ProblemSetListApi.
 * @export
 * @interface ProblemSetListApiProblemSetListRetrieveRequest
 */
export interface ProblemSetListApiProblemSetListRetrieveRequest {
  /**
   * run_readable_id of the course run
   * @type {string}
   * @memberof ProblemSetListApiProblemSetListRetrieve
   */
  readonly run_readable_id: string
}

/**
 * ProblemSetListApi - object-oriented interface
 * @export
 * @class ProblemSetListApi
 * @extends {BaseAPI}
 */
export class ProblemSetListApi extends BaseAPI {
  /**
   * API view to get a list of problem sets for a given course.
   * @param {ProblemSetListApiProblemSetListRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProblemSetListApi
   */
  public problemSetListRetrieve(
    requestParameters: ProblemSetListApiProblemSetListRetrieveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ProblemSetListApiFp(this.configuration)
      .problemSetListRetrieve(requestParameters.run_readable_id, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * PromptsApi - axios parameter creator
 * @export
 */
export const PromptsApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     * Return a list of system prompts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promptsList: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/api/v0/prompts/`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * Return a specific system prompt.
     * @param {string} prompt_name name of the system prompt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promptsRetrieve: async (
      prompt_name: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'prompt_name' is not null or undefined
      assertParamExists("promptsRetrieve", "prompt_name", prompt_name)
      const localVarPath = `/api/v0/prompts/{prompt_name}/`.replace(
        `{${"prompt_name"}}`,
        encodeURIComponent(String(prompt_name)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PromptsApi - functional programming interface
 * @export
 */
export const PromptsApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = PromptsApiAxiosParamCreator(configuration)
  return {
    /**
     * Return a list of system prompts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async promptsList(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<SystemPrompt>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.promptsList(options)
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["PromptsApi.promptsList"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
    /**
     * Return a specific system prompt.
     * @param {string} prompt_name name of the system prompt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async promptsRetrieve(
      prompt_name: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemPrompt>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.promptsRetrieve(
        prompt_name,
        options,
      )
      const index = configuration?.serverIndex ?? 0
      const operationBasePath =
        operationServerMap["PromptsApi.promptsRetrieve"]?.[index]?.url
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath)
    },
  }
}

/**
 * PromptsApi - factory interface
 * @export
 */
export const PromptsApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = PromptsApiFp(configuration)
  return {
    /**
     * Return a list of system prompts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promptsList(
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<Array<SystemPrompt>> {
      return localVarFp
        .promptsList(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * Return a specific system prompt.
     * @param {PromptsApiPromptsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    promptsRetrieve(
      requestParameters: PromptsApiPromptsRetrieveRequest,
      options?: RawAxiosRequestConfig,
    ): AxiosPromise<SystemPrompt> {
      return localVarFp
        .promptsRetrieve(requestParameters.prompt_name, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * Request parameters for promptsRetrieve operation in PromptsApi.
 * @export
 * @interface PromptsApiPromptsRetrieveRequest
 */
export interface PromptsApiPromptsRetrieveRequest {
  /**
   * name of the system prompt
   * @type {string}
   * @memberof PromptsApiPromptsRetrieve
   */
  readonly prompt_name: string
}

/**
 * PromptsApi - object-oriented interface
 * @export
 * @class PromptsApi
 * @extends {BaseAPI}
 */
export class PromptsApi extends BaseAPI {
  /**
   * Return a list of system prompts.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PromptsApi
   */
  public promptsList(options?: RawAxiosRequestConfig) {
    return PromptsApiFp(this.configuration)
      .promptsList(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * Return a specific system prompt.
   * @param {PromptsApiPromptsRetrieveRequest} requestParameters Request parameters.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PromptsApi
   */
  public promptsRetrieve(
    requestParameters: PromptsApiPromptsRetrieveRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return PromptsApiFp(this.configuration)
      .promptsRetrieve(requestParameters.prompt_name, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
