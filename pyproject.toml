[tool.poetry]
name = "learn-ai"
version = "0.71.0"
description = "AI applications for MIT Open Learning."
license = "BSD-3"
readme = "README.md"
packages = []
authors  = ["MIT ODL"]


[tool.poetry.dependencies]
python = "^3.13.7"
Django = "4.2.25"
aiohttp = "^3.12.15"
beautifulsoup4 = "^4.13.4"
boto3 = "^1.35.81"
celery = "^5.3.1"
channels = {version = "^4.2.0"}
channels-redis = "^4.2.1"
configargparse = "^1.7.1"
dj-database-url = "^2.0.0"
dj-static = "^0.0.6"
django-anymail = {extras = ["mailgun"], version = "^13.0"}
django-bitfield = "^2.2.0"
django-cache-memoize = "^0.2.0"
django-filter = "^25.1"
django-guardian = "^3.0.0"
django-health-check = { git = "https://github.com/revsys/django-health-check", rev="592f6a8fc2a8481f4f810678461db52bd1b0e3d6" }  # pragma: allowlist secret
django-hijack = "^3.4.1"
django-ipware = "^7.0.0"
django-oauth-toolkit = "^3.0.0"
django-redis = "^5.2.0"
django-scim2 = "^0.19.1"
django-server-status = "^0.7.0"
django-storages = "^1.13.2"
djangorestframework = "^3.14.0"
drf-jwt = "^1.19.2"
drf-spectacular = "^0.28.0"
gunicorn = "^23.0.0"
ipython = "^9.0.0"
langchain = "^0.3.13"
langchain-community = "^0.3.16"
langchain-core = "^0.3.31"
langchain-litellm = "^0.2.2"
langchain-openai = "^0.3.0"
langgraph = "^0.6.6"
langgraph-checkpoint-postgres = "^2.0.13"
langmem = "^0.0.29"
langsmith = "^0.4.21"
litellm = "^1.53.5"
markdown2 = "^2.5.2"
named-enum = "^1.4.0"
opentelemetry-api = ">=1.31.0"
opentelemetry-exporter-otlp = ">=1.31.0"
opentelemetry-instrumentation-celery = ">=0.52b0"
opentelemetry-instrumentation-django = ">=0.52b0"
opentelemetry-instrumentation-psycopg = ">=0.52b0"
opentelemetry-instrumentation-redis = ">=0.52b0"
opentelemetry-instrumentation-requests = ">=0.52b0"
opentelemetry-sdk = ">=1.31.0"
posthog = "^3.5.0"
psycopg = "^3.2.4"
psycopg-pool = "^3.2.4"
pygithub = "^2.0.0"
redis = "^5.0.0"
requests = "^2.31.0"
ruff = "0.12.12"
sentry-sdk = {extras = ["django", "langgraph"], version = "^2.37.1"}
social-auth-app-django = "^5.2.0"
social-auth-core = {extras = ["openidconnect"], version = "^4.4.2"}
starlette = "0.47.3"
ulid-py = "^1.0.0"
uvicorn = {extras = ["standard"], version = "^0.35.0"}
granian = "^2.5.4"
open-learning-ai-tutor = "^0.2.12"

[tool.poetry.group.dev.dependencies]
bpython = "^0.25"
ddt = "^1.6.0"
django-debug-toolbar = "^6.0.0"
factory_boy = "^3.3.0"
faker = "^37.0.0"
ipdb = "^0.13.13"
nplusone = "^1.0.0"
pdbpp = "^0.11.0"
pytest = "^8.0.0"
pytest-cov = "^6.0.0"
pytest-django = "^4.5.2"
pytest-env = "^1.0.0"
pytest-freezegun = "^0.4.2"
pytest-mock = "^3.10.0"
responses = "^0.25.0"
ruff = "^0.12.0"
safety = "^3.0.0"
semantic-version = "^2.10.0"
freezegun = "^1.4.0"
pytest-xdist = { version = "^3.6.1", extras = ["psutil"] }
anys = "^0.3.0"
locust = "^2.31.2"
pytest-asyncio = "^1.0.0"
jupyter = "^1.1.1"
deepeval = "^3.1.4"
chromadb = "^1.0.13"
pandas = "^2.3.0"

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
target-version = "py311"
line-length = 88
lint.select = [
    "A",  # flake8-builtins
    # "AIR",  # Airflow
    # "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    # "ASYNC",  # flake8-async
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90",  # mccabe
    # "COM",  # flake8-commas
    "CPY",  # flake8-copyright
    "D",  # pydocstyle
    "DJ",  # flake8-django
    "DTZ",  # flake8-datetimez
    "E",  # Pycodestyle Error
    "EM",  # flake8-errmsg
    "ERA",  # eradicate
    "EXE",  # flake8-executable
    "F",  # Pyflakes
    "FA",  # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    # "FURB",  # refurb
    "G",  # flake8-logging-format
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "INT",  # flake8-gettext
    "ISC",  # flake8-implicit-str-concat
    "N",  # pep8-naming
    # "NPY",  # NumPy-specific rules
    # "PD",  # pandas-vet
    "PERF",  # Perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",  # Pylint
    "PT",  # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "S",  # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TD",  # flake8-todos
    "TID",  # flake8-tidy-imports
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Pycodestyle Warning
    "YTT",  # flake8-2020
]
lint.ignore = [
    "B008",
    "B905",
    "D104",
    "D200",
    "D202",
    "D205",
    "D301",
    "D400",
    "N803",
    "N806",
    "N999",
    "PIE804",
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "RUF012",
    "UP007"
]

lint.typing-modules = ["colour.hints"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.per-file-ignores]
"*_test.py" = ["ARG001", "E501", "S101", "PLR2004"]
"test_*.py" = ["ARG001", "E501", "S101", "PLR2004"]
"**/migrations/**" = ["ARG001"]
